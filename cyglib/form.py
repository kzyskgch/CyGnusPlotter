# -*- coding: utf-8 -*-
'''
Copyright 2018 Kazuya SAKAGUCHI Licensed under the
Educational Community License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may
obtain a copy of the License at

http://www.osedu.org/licenses/ECL-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an "AS IS"
BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
or implied. See the License for the specific language governing
permissions and limitations under the License.
'''
from collections import namedtuple


###Requests are received by GPInput
Request = \
namedtuple('Request',
           ['component_type',
           'rack_order',
           'item_group'])


def new_request(component_type='',
                rack_order=int(),
                item_group=list()):
    return Request(component_type=str(component_type),
                   rack_order=rack_order,
                   item_group=list(item_group))


###Item
Item = \
namedtuple('Item',
           ['name',
           'start',
           'end',
           'spot',
           'pattern',
           'position_on_pattern',
           'position_spot',
           'option'])


def new_item(name='',
            start=0,
            end=0,
            spot=0,
            pattern='',
            position_on_pattern=0,
            position_spot=tuple(),
            option=''):
    return Item(name=name,
                start=start,
                end=end,
                spot=spot,
                pattern=pattern,
                position_on_pattern=position_on_pattern,
                position_spot=position_spot,
                option=option)


def new_column_index(name = '',
             start=None,
             end=None,
             spot=None,
             pattern=None,
             position_on_pattern=None,
             position_spot=None,
             option=None):
    return Item(name = name,
                start = start,
                end = end,
                spot = spot,
                pattern = pattern,
                position_on_pattern = position_on_pattern,
                position_spot=position_spot,
                option=option)


def new_item_from_list(lst):
    tmp_new_item = Item._make(lst)
    tmp_new_item = tmp_new_item._replace(name=
                                         str(tmp_new_item.name))
    tmp_new_item = tmp_new_item._replace(start=
                                         int(tmp_new_item.start))
    tmp_new_item = tmp_new_item._replace(end=
                                         int(tmp_new_item.end))
    tmp_new_item = tmp_new_item._replace(pattern=
                                         str(tmp_new_item.pattern))
    tmp_new_item = tmp_new_item._replace(position_on_pattern=
                                         float(tmp_new_item.position_on_pattern))
    tmp_new_item = tmp_new_item._replace(position_spot=
                                         list(tmp_new_item.position_spot))
    return tmp_new_item


###Coordinates are generated by a Layout and received by Components.
###These data-sets mean
Coordinate = \
namedtuple('Coordinate',
           ['x0',
           'y0',
           'x1',
           'y1',
           'x_spot'])


def new_coordinate(x0=0,
                   y0=0,
                   x1=0,
                   y1=0,
                   x_spot=list()):
    return Coordinate(x0=x0,
                      y0=y0,
                      x1=x1,
                      y1=y1,
                      x_spot=x_spot)


###Report
Report = \
namedtuple('Report',
           ['eps_file_name',
           'eps'])


def new_report(eps_file_name=str(),
               eps=None):
    return Report(eps_file_name=eps_file_name,
           eps=eps)


###genomicloc data by ensembl style
GenomeLoc = \
namedtuple('GenomeLoc',
           ['seq',
            'display_name',
            'assembly_name',
            'seq_region_name',
            'start',
            'end',
            'strand'])


def new_genomeloc(seq='',
                display_name=str(),
                   assembly_name=str(),
                   seq_region_name=int(),
                   start=int(),
                   end=int(),
                    strand=1
                   ):
    return GenomeLoc(seq=seq,
                   display_name=display_name,
                   assembly_name=assembly_name,
                   seq_region_name=seq_region_name,
                   start=start,
                   end=end,
                   strand=strand
                   )